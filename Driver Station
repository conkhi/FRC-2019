/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
  private static final String kDefaultAuto = "Default";
  private static final String kCustomAuto = "My Auto";
  private String m_autoSelected;
  private final SendableChooser<String> m_chooser = new SendableChooser<>();
  double left,right;
  Compressor comp;
  DoubleSolenoid piston;
  Talon FLM,FRM,BLM,BRM;
  Timer cooldown, cc;
  Joystick Stick1;
  Joystick Stick2;
  Joystick Stick3;
  CameraServer cam0;
  int press = 0;
  boolean pneum;
  
  

  /**
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */
  @Override
  public void robotInit() {
    m_chooser.setDefaultOption("Default Auto", kDefaultAuto);
    m_chooser.addOption("My Auto", kCustomAuto);
    SmartDashboard.putData("Auto choices", m_chooser);
    //Assigning/Initializing variables
    FLM = new Talon(2);
    FRM = new Talon(4);
    BLM = new Talon(3);
    BRM = new Talon(1);
    CameraServer.getInstance().startAutomaticCapture();
    Stick1 = new Joystick(0);
    Stick2 = new Joystick(1);
    Stick3 = new Joystick(2);
    piston = new DoubleSolenoid(0, 1);
    comp = new Compressor();
    cooldown = new Timer();
    cc = new Timer();
    cc.start();
    cooldown.start();
    cc.reset();
    cooldown.reset();
    pneum = false;
  }

  /**
   * This function is called every robot packet, no matter the mode. Use
   * this for items like diagnostics that you want ran during disabled,
   * autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before
   * LiveWindow and SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {
  }

  /**
   * This autonomous (along with the chooser code above) shows how to select
   * between different autonomous modes using the dashboard. The sendable
   * chooser code works with the Java SmartDashboard. If you prefer the
   * LabVIEW Dashboard, remove all of the chooser code and uncomment the
   * getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to
   * the switch structure below with additional strings. If using the
   * SendableChooser make sure to add them to the chooser code above as well.
   */
  @Override
  public void autonomousInit() {
    m_autoSelected = m_chooser.getSelected();
    // m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    System.out.println("Auto selected: " + m_autoSelected);
  }

  /**
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {
    switch (m_autoSelected) {
      case kCustomAuto:
        // Put custom auto code here
        break;
      case kDefaultAuto:
      default:
        // Put default auto code here
        break;
    }
  }

  /**
   * This function is called periodically during operator control.
   */
  @Override
  public void teleopPeriodic() {
    left = -Stick1.getRawAxis(1);
    right = Stick2.getRawAxis(1);
    /* Turbo System
    if(Stick1.getRawButtonPressed(2) || Stick2.getRawButtonPressed(2)){
      FLM.setSpeed(left/6);
      FRM.setSpeed(right/6);
      BLM.setSpeed(left/6);
      BRM.setSpeed(right/6);
    } else{
      FLM.setSpeed(left*0.8);
      FRM.setSpeed(right*0.8);
      BLM.setSpeed(left*0.8);
      BRM.setSpeed(right*0.8);
    }*/
    
    FLM.setSpeed(left*0.8);
    FRM.setSpeed(right*0.8);
    BLM.setSpeed(left*0.8);
    BRM.setSpeed(right*0.8);
    Update();

    
    // Pneumatic System
    
    /*if (Stick3.getRawButton(1) && pneum == false) {
      pneum = true;
      piston.set(Value.kReverse);
    } else if (Stick3.getRawButton(1) && pneum == true) {
      pneum = false;
      piston.set(Value.kForward);
    } else{

    }*/
    
    
    /*if (Stick1.getRawButton(2)){
      if (cc.get() > 0.5) {
        piston.set(Value.kForward);
        Update();
      } else {
        piston.set(Value.kReverse);
        cc.reset();
        Update();
      }
    }*/

    if (Stick3.getRawButton(1)){
      if(cooldown.get() >= 0.5){
        piston.set(Value.kReverse);
        cooldown.stop();
        cooldown.reset();
        cc.reset();
        Update();
      } else if (cc.get() > 0.5) {
        cooldown.start();
        piston.set(Value.kForward);
        Update();
      }
    }

    /*
    if (Stick1.getRawButton(1)) {
      piston.set(Value.kForward);
    } else if (Stick2.getRawButton(1)){
      piston.set(Value.kReverse);
    }
    */

    
    Update();
    if(Stick2.getRawButton(1)){
      cc.reset();
      cooldown.reset();
      Update();
    }
  }

  /**
   * This function is called periodically during test mode.
   */
  @Override
  public void testPeriodic() {
  }
  public void Update(){
    SmartDashboard.putBoolean("Held", (Stick1.getRawButton(2)));
    SmartDashboard.putBoolean("Forward", (Stick1.getRawButton(2) && cooldown.get() >= 1.0) );
    SmartDashboard.putBoolean("Reverse", (Stick1.getRawButton(2) && cooldown.get() == 0) );
    SmartDashboard.putNumber("Cooldown Time", cooldown.get());
    SmartDashboard.putNumber("CC", cc.get());
    if(piston.get() == Value.kForward){
      SmartDashboard.putString("Pneumatics", "Forward");
    } else if(piston.get() == Value.kReverse){
      SmartDashboard.putString("Pneumatics", "Reverse");
    } else{
      SmartDashboard.putString("Pneumatics", "Off");
    }
  }
}
